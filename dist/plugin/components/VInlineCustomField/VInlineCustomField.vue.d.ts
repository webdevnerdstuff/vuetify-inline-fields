import { FieldValue } from '../../types';
import { VInlineCustomFieldProps } from './';
declare let __VLS_typeProps: VInlineCustomFieldProps;
type __VLS_PublicProps = {
    modelValue?: FieldValue;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Partial<Record<NonNullable<string | number>, (_: any) => any>> & {
        default?(_: {
            loading: boolean;
            modelValue: any;
            originalValue: any;
            rules: readonly ((string | boolean) | ((value: any) => string | boolean) | ((value: any) => PromiseLike<string | boolean>) | {
                then: <TResult1 = string | boolean, TResult2 = never>(onfulfilled?: ((value: string | boolean) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => PromiseLike<TResult1 | TResult2>;
            })[] | undefined;
            clearIcon: string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>);
            truncateLength: number | undefined;
            truncateSuffix: string;
            variant: "underlined" | "outlined" | "plain" | "filled" | "solo" | "solo-inverted" | "solo-filled";
            hideCancelIcon: boolean;
            hideSaveIcon: boolean;
            loadingIcon: string | undefined;
            loadingIconColor: string;
            saveButtonColor: string;
            saveButtonSize: string | number;
            saveButtonTitle: string;
            saveButtonVariant: "flat" | "text" | "elevated" | "tonal" | "outlined" | "plain";
            saveIcon: string | undefined;
            saveIconColor: string;
            autofocus: boolean;
            cancelButtonColor: string;
            cancelButtonSize: string | number;
            cancelButtonTitle: string;
            cancelButtonVariant: "flat" | "text" | "elevated" | "tonal" | "outlined" | "plain";
            cancelIcon: string | undefined;
            cancelIconColor: string;
            cardField: boolean;
            cardOffsetX: number;
            cardOffsetY: number;
            cardProps: any;
            cell: boolean;
            cellUnderlineFullWidth: boolean;
            closeSiblings: boolean;
            color: string;
            density: "default" | "comfortable" | "compact" | null;
            disabled: boolean;
            displayAppendIcon: (string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>)) | undefined;
            displayAppendIconColor: string | undefined;
            displayAppendIconSize: string | number;
            displayAppendInnerIcon: (string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>)) | undefined;
            displayAppendInnerIconColor: string | undefined;
            displayAppendInnerIconSize: string | number;
            displayPrependIcon: (string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>)) | undefined;
            displayPrependIconColor: string | undefined;
            displayPrependIconSize: string | number;
            displayPrependInnerIcon: (string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>)) | undefined;
            displayPrependInnerIconColor: string | undefined;
            displayPrependInnerIconSize: string | number;
            emptyText: string;
            error: boolean;
            fieldOnly: boolean;
            hideDetails: boolean;
            label: string;
            loadingWait: boolean;
            name: string;
            required: boolean;
            tableField: boolean;
            underlineColor: string;
            underlineStyle: string;
            underlineWidth: string;
            underlined: boolean;
            valueColor: string;
        }): any;
    };
    refs: {
        inlineFieldsContainer: HTMLDivElement;
        cardFieldRef: HTMLDivElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{}>, {
    truncateLength: number;
    truncateSuffix: string;
    autofocus: boolean;
    cancelButtonColor: string;
    cancelButtonSize: string | number;
    cancelButtonTitle: string;
    cancelButtonVariant: "flat" | "text" | "elevated" | "tonal" | "outlined" | "plain";
    cancelIcon: string;
    cancelIconColor: string;
    cardField: boolean;
    cardOffsetX: number;
    cardOffsetY: number;
    cardProps: typeof import('vuetify/lib/components/index.mjs').VCard["$props"];
    cell: boolean;
    cellUnderlineFullWidth: boolean;
    closeSiblings: boolean;
    color: string;
    disabled: boolean;
    displayAppendIcon: string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>);
    displayAppendIconColor: string;
    displayAppendIconSize: string | number;
    displayAppendInnerIcon: string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>);
    displayAppendInnerIconColor: string;
    displayAppendInnerIconSize: string | number;
    displayPrependIcon: string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>);
    displayPrependIconColor: string;
    displayPrependIconSize: string | number;
    displayPrependInnerIcon: string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>);
    displayPrependInnerIconColor: string;
    displayPrependInnerIconSize: string | number;
    emptyText: string;
    error: boolean;
    fieldOnly: boolean;
    hideCancelIcon: boolean;
    hideDetails: boolean;
    hideSaveIcon: boolean;
    label: string;
    loading: boolean;
    loadingIcon: string;
    loadingIconColor: string;
    loadingWait: boolean;
    name: string;
    required: boolean;
    saveButtonColor: string;
    saveButtonSize: string | number;
    saveButtonTitle: string;
    saveButtonVariant: "flat" | "text" | "elevated" | "tonal" | "outlined" | "plain";
    saveIcon: string;
    saveIconColor: string;
    tableField: boolean;
    underlineColor: string;
    underlineStyle: string;
    underlineWidth: string;
    underlined: boolean;
    valueColor: string;
    clearIcon: string | (string | [path: string, opacity: number])[] | ((new () => any) | import('vue').FunctionalComponent<any, {}, any, {}>);
    density: "default" | "comfortable" | "compact" | null;
    variant: "underlined" | "outlined" | "plain" | "filled" | "solo" | "solo-inverted" | "solo-filled";
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
